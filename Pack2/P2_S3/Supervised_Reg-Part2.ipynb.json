{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook is made for \"Data Analysis for Genomics Workshop\" (DAGWS). \n",
    "Tran Bich Ngoc CAO, ENS Paris, August 2020.\n",
    "<a rel=\"license\" href=\"https://creativecommons.org/licenses/by/2.0/\"><img alt=\"Licence Creative Commons\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br /> This work is protected by the term of <a rel=\"license\" href=\"https://creativecommons.org/licenses/by/2.0/\"> Attribution 2.0 Generic (CC BY 2.0) </a>. Please cite the source in case of re-distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Supervised Learning: Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  <img src=\"fig/regression-vs-classification-in-machine-learning.png\" width=300 >"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- In your opinion, when to use Regression instead of Classification? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this excercise, you will build a Regressor - a statistical model, again, to predict the values of new __continuous__ data from some selected features of the dataset and its target. You will also find the features that influence most significantly to the target, in other words, having the highest variance. Unlike classification, your target is no longer categorical, but continuous.\n",
    "We will first start with Linear regression model of a very simple example.  Let's dive in!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[*Source image: Datacamp*] \n",
    "<img src=\"fig/regress_mechan.png\" width=400>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/lossf.png\" width=400>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/regress_highD.png\" width=400>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Excercise 1: BirthWeight\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- I bet some of you may have seen this dataset. This is the BirthWeight dataset accompanying measurement of newborns biparietal and abdomial diameter. I was lazy to change the format of one column, which including a newline \"\\n\", thus you might not be able to read in the dataset normally. Do you know a way to skip the wrong lines?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the data\n",
    "\n",
    "# bw: birth weight - bpd: biparietal diameter - abdominal diameter - idr: ID number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "b'Skipping line 34: expected 4 fields, saw 5\\n'\n"
     ]
    }
   ],
   "source": [
    "bw_dt = pd.read_csv(\"data/BirthWeight.csv\",header=0,delimiter=\";\",error_bad_lines=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(106, 4)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bw_dt.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bw</th>\n",
       "      <th>bpd</th>\n",
       "      <th>ad</th>\n",
       "      <th>idnr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2350</td>\n",
       "      <td>88</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2450</td>\n",
       "      <td>91</td>\n",
       "      <td>98</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3300</td>\n",
       "      <td>94</td>\n",
       "      <td>110</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1800</td>\n",
       "      <td>84</td>\n",
       "      <td>89</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2900</td>\n",
       "      <td>89</td>\n",
       "      <td>97</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     bw  bpd   ad  idnr\n",
       "0  2350   88   92     1\n",
       "1  2450   91   98     2\n",
       "2  3300   94  110     3\n",
       "3  1800   84   89     4\n",
       "4  2900   89   97     5"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bw_dt.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Next we plot the variable birth weight as a function of the abdominal diameter, compute the correlation coefficient and test its significance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Birth weight as a function of the abdominal diameter')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.scatter(bw_dt.ad,bw_dt.bw)\n",
    "plt.xlabel(\"Abdominal diameter\")\n",
    "plt.ylabel(\"Birth weight\")\n",
    "plt.title(\"Birth weight as a function of the abdominal diameter\")\n",
    "# correlation coefficient \n",
    "\n",
    "# test the significance of the correlation coefficient "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can assess all features by pairplot from seaborn!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- A multipanel display of pairwise scatterplot may be obtained\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pairwise plot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x12d101128>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x540 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.pairplot(bw_dt.iloc[:,0:3])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Seem like `bw` and `ad` is the most correlated pair!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Build a correlation matrix "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bw</th>\n",
       "      <th>bpd</th>\n",
       "      <th>ad</th>\n",
       "      <th>idnr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>bw</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.797616</td>\n",
       "      <td>0.873200</td>\n",
       "      <td>-0.188255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bpd</th>\n",
       "      <td>0.797616</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.756499</td>\n",
       "      <td>-0.240256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ad</th>\n",
       "      <td>0.873200</td>\n",
       "      <td>0.756499</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.115490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>idnr</th>\n",
       "      <td>-0.188255</td>\n",
       "      <td>-0.240256</td>\n",
       "      <td>-0.115490</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            bw       bpd        ad      idnr\n",
       "bw    1.000000  0.797616  0.873200 -0.188255\n",
       "bpd   0.797616  1.000000  0.756499 -0.240256\n",
       "ad    0.873200  0.756499  1.000000 -0.115490\n",
       "idnr -0.188255 -0.240256 -0.115490  1.000000"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# correlation matrix\n",
    "cof = bw_dt.iloc[:,0:4].corr(method='pearson')\n",
    "cof\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_- Here we use implicitly method \"Pearson\" with pandas dataframe method corr(). Try yourself another methods (Kendall, Spearman...)_ \n",
    "Which method performs the best?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Plot correlation matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(cof)\n",
    "plt.xticks(range(len(bw_dt.columns)), bw_dt.columns)\n",
    "plt.yticks(range(len(bw_dt.columns)), bw_dt.columns)\n",
    "plt.colorbar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We then perform a linear regression on these variables:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# linear model Y ~ X\n",
    "\n",
    "\n",
    "# summary of the regression\n",
    "\n",
    "\n",
    "# extract the adjusted-R2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Import LinearRegression from sklearn.linear_model\n",
    "- Instantiate the regressor named `reg`\n",
    "- Create the prediction space with Numpy np.linspace() method with a range from the maximum and minimum of `brcc_df.`\n",
    "NOTE: try to reshape the array, reshape the arrays by using the .reshape() method and passing in -1 and 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When you call fit() on a linear regression model in sklearn, it actually calculate OLS under the hood! In short, we are trying to specify a(i) and b parameters in our model by minimizing the lost (cost) function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import LinearRegression\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the regressor: reg\n",
    "reg = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape your data\n",
    "bw = bw_dt.bw.values\n",
    "\n",
    "bw = bw.reshape(-1,1)\n",
    "ad = bw_dt.ad.values\n",
    "ad = ad.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "# It is the same as:\n",
    "ad = bw_dt[['ad']]\n",
    "bw = bw_dt[[\"bw\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(106, 1)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ad.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/caotranbichngoc/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/_base.py:547: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver.\n",
      "  linalg.lstsq(X, y)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the model to the data\n",
    "reg.fit(ad, bw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute predictions over the prediction space: y_pred\n",
    "pred = reg.predict(ad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R squared score: 0.7624787348832314\n"
     ]
    }
   ],
   "source": [
    "# Print R^2 \n",
    "print(\"R squared score: {}\" .format(reg.score(ad,bw)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.scatter(ad,bw)\n",
    "# Create the prediction space to draw the line as matplotlib requires the limits for the line\n",
    "eq_space_X = np.linspace(min(ad.values), max(ad.values), 106).flatten()\n",
    "eq_space_y = reg.predict(eq_space_X[:, None])\n",
    "plt.plot(eq_space_X, eq_space_y, color='black', linewidth=3)\n",
    "plt.xlabel(\"Abdominal diameter in cm\")\n",
    "plt.ylabel(\"Birth weight in gram\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What is R-squared?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- so called **coefficient of determination**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Revision from Khan Academy](https://www.khanacademy.org/math/ap-statistics/bivariate-data-ap/assessing-fit-least-squares-regression/v/r-squared-or-coefficient-of-determination)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`the proportion of the variance in the dependent variable that is predictable from the independent variable`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/r2_2.png\" width=200>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/r2_1.png\" width=200>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/r2.png\" width=200>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- R-squared tells us what percent of the prediction error in the y variable is eliminated when we use least-squares regression on the x variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another metric is RMSE: Root mean squared error\n",
    "- calculate the RMSE, we want to see how much error we get from the \"real\" y (bw - birthweight) and the predicted y. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error: 0.34kg\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "rmse = np.sqrt(mean_squared_error(bw,pred))\n",
    "print(f\"Root Mean Squared Error: {rmse / 1000:.2f}kg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus we see our model predicts wrong birthweight at an error of 0.34kg. Not too bad ^^"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- You just made prediction of birthweight from addominal diameter and assess the metrics for you model. Great work!\n",
    "Now, we will try using multiple predictors :) Moreover, we will apply what we learnt yesterday, splitting data into train and test set! In the next session! :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Additional Reading:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html \n",
    "- https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n",
    "- https://www.khanacademy.org/math/ap-statistics/bivariate-data-ap/assessing-fit-least-squares-regression/a/r-squared-intuition "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Session 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train test split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Excercise 2: A microarray meta-dataset of non-small cell lung cancer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dataset was obtained from [EBI European Bioinformatics Institute](https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-6043/?full=true&s_sortby=col_3&s_sortorder=ascending&s_page=19&s_pagesize=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in the dataset by Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"data/Combat_filtered_exprs.txt\",delimiter=\"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GSM494556</th>\n",
       "      <th>GSM494557</th>\n",
       "      <th>GSM494558</th>\n",
       "      <th>GSM494559</th>\n",
       "      <th>GSM494560</th>\n",
       "      <th>GSM494561</th>\n",
       "      <th>GSM494562</th>\n",
       "      <th>GSM494563</th>\n",
       "      <th>GSM494564</th>\n",
       "      <th>GSM494565</th>\n",
       "      <th>...</th>\n",
       "      <th>GSM259424</th>\n",
       "      <th>GSM259425</th>\n",
       "      <th>GSM259427</th>\n",
       "      <th>GSM260378</th>\n",
       "      <th>GSM260379</th>\n",
       "      <th>GSM264313</th>\n",
       "      <th>GSM264314</th>\n",
       "      <th>GSM264315</th>\n",
       "      <th>GSM264316</th>\n",
       "      <th>GSM264317</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A1BG</th>\n",
       "      <td>5.234802</td>\n",
       "      <td>5.069035</td>\n",
       "      <td>5.514972</td>\n",
       "      <td>6.871695</td>\n",
       "      <td>6.761781</td>\n",
       "      <td>6.469957</td>\n",
       "      <td>5.136920</td>\n",
       "      <td>6.624224</td>\n",
       "      <td>6.448347</td>\n",
       "      <td>5.912488</td>\n",
       "      <td>...</td>\n",
       "      <td>6.071715</td>\n",
       "      <td>6.448654</td>\n",
       "      <td>5.996287</td>\n",
       "      <td>5.572166</td>\n",
       "      <td>6.361954</td>\n",
       "      <td>5.477867</td>\n",
       "      <td>5.377008</td>\n",
       "      <td>6.620990</td>\n",
       "      <td>5.286392</td>\n",
       "      <td>5.575501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A2M</th>\n",
       "      <td>11.922797</td>\n",
       "      <td>11.146006</td>\n",
       "      <td>12.378934</td>\n",
       "      <td>11.853862</td>\n",
       "      <td>11.200515</td>\n",
       "      <td>12.334154</td>\n",
       "      <td>10.023953</td>\n",
       "      <td>10.054993</td>\n",
       "      <td>11.761122</td>\n",
       "      <td>10.673644</td>\n",
       "      <td>...</td>\n",
       "      <td>13.057279</td>\n",
       "      <td>10.054903</td>\n",
       "      <td>12.762107</td>\n",
       "      <td>12.216075</td>\n",
       "      <td>12.628827</td>\n",
       "      <td>12.328099</td>\n",
       "      <td>12.930627</td>\n",
       "      <td>11.940680</td>\n",
       "      <td>12.125840</td>\n",
       "      <td>12.978447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A2M-AS1</th>\n",
       "      <td>5.031032</td>\n",
       "      <td>4.737330</td>\n",
       "      <td>6.990395</td>\n",
       "      <td>4.589314</td>\n",
       "      <td>5.001184</td>\n",
       "      <td>5.202235</td>\n",
       "      <td>4.240061</td>\n",
       "      <td>5.124648</td>\n",
       "      <td>5.904889</td>\n",
       "      <td>5.284042</td>\n",
       "      <td>...</td>\n",
       "      <td>5.068981</td>\n",
       "      <td>5.196625</td>\n",
       "      <td>6.603280</td>\n",
       "      <td>4.449814</td>\n",
       "      <td>5.033722</td>\n",
       "      <td>4.945388</td>\n",
       "      <td>5.334643</td>\n",
       "      <td>4.437407</td>\n",
       "      <td>5.216904</td>\n",
       "      <td>5.636242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AACS</th>\n",
       "      <td>9.141089</td>\n",
       "      <td>8.926558</td>\n",
       "      <td>7.268946</td>\n",
       "      <td>8.874169</td>\n",
       "      <td>9.027746</td>\n",
       "      <td>7.880838</td>\n",
       "      <td>8.201494</td>\n",
       "      <td>9.106410</td>\n",
       "      <td>8.296303</td>\n",
       "      <td>9.245787</td>\n",
       "      <td>...</td>\n",
       "      <td>7.687831</td>\n",
       "      <td>6.826333</td>\n",
       "      <td>7.771100</td>\n",
       "      <td>8.208830</td>\n",
       "      <td>7.486710</td>\n",
       "      <td>8.940618</td>\n",
       "      <td>8.073093</td>\n",
       "      <td>7.866122</td>\n",
       "      <td>9.331065</td>\n",
       "      <td>7.486466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AADAC</th>\n",
       "      <td>9.934807</td>\n",
       "      <td>4.419542</td>\n",
       "      <td>4.253987</td>\n",
       "      <td>5.911853</td>\n",
       "      <td>5.356248</td>\n",
       "      <td>7.819313</td>\n",
       "      <td>3.941931</td>\n",
       "      <td>4.928721</td>\n",
       "      <td>7.055602</td>\n",
       "      <td>3.830511</td>\n",
       "      <td>...</td>\n",
       "      <td>5.217805</td>\n",
       "      <td>4.800766</td>\n",
       "      <td>5.159710</td>\n",
       "      <td>8.001606</td>\n",
       "      <td>5.882841</td>\n",
       "      <td>6.083279</td>\n",
       "      <td>7.144566</td>\n",
       "      <td>4.590773</td>\n",
       "      <td>7.195287</td>\n",
       "      <td>5.515554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1118 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         GSM494556  GSM494557  GSM494558  GSM494559  GSM494560  GSM494561  \\\n",
       "A1BG      5.234802   5.069035   5.514972   6.871695   6.761781   6.469957   \n",
       "A2M      11.922797  11.146006  12.378934  11.853862  11.200515  12.334154   \n",
       "A2M-AS1   5.031032   4.737330   6.990395   4.589314   5.001184   5.202235   \n",
       "AACS      9.141089   8.926558   7.268946   8.874169   9.027746   7.880838   \n",
       "AADAC     9.934807   4.419542   4.253987   5.911853   5.356248   7.819313   \n",
       "\n",
       "         GSM494562  GSM494563  GSM494564  GSM494565  ...  GSM259424  \\\n",
       "A1BG      5.136920   6.624224   6.448347   5.912488  ...   6.071715   \n",
       "A2M      10.023953  10.054993  11.761122  10.673644  ...  13.057279   \n",
       "A2M-AS1   4.240061   5.124648   5.904889   5.284042  ...   5.068981   \n",
       "AACS      8.201494   9.106410   8.296303   9.245787  ...   7.687831   \n",
       "AADAC     3.941931   4.928721   7.055602   3.830511  ...   5.217805   \n",
       "\n",
       "         GSM259425  GSM259427  GSM260378  GSM260379  GSM264313  GSM264314  \\\n",
       "A1BG      6.448654   5.996287   5.572166   6.361954   5.477867   5.377008   \n",
       "A2M      10.054903  12.762107  12.216075  12.628827  12.328099  12.930627   \n",
       "A2M-AS1   5.196625   6.603280   4.449814   5.033722   4.945388   5.334643   \n",
       "AACS      6.826333   7.771100   8.208830   7.486710   8.940618   8.073093   \n",
       "AADAC     4.800766   5.159710   8.001606   5.882841   6.083279   7.144566   \n",
       "\n",
       "         GSM264315  GSM264316  GSM264317  \n",
       "A1BG      6.620990   5.286392   5.575501  \n",
       "A2M      11.940680  12.125840  12.978447  \n",
       "A2M-AS1   4.437407   5.216904   5.636242  \n",
       "AACS      7.866122   9.331065   7.486466  \n",
       "AADAC     4.590773   7.195287   5.515554  \n",
       "\n",
       "[5 rows x 1118 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To have genes as columns and samples in rows, use .transpose() method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2M-AS1</th>\n",
       "      <th>AACS</th>\n",
       "      <th>AADAC</th>\n",
       "      <th>AADACP1</th>\n",
       "      <th>AADAT</th>\n",
       "      <th>AAED1</th>\n",
       "      <th>AAGAB</th>\n",
       "      <th>AAK1</th>\n",
       "      <th>...</th>\n",
       "      <th>ZW10</th>\n",
       "      <th>ZWILCH</th>\n",
       "      <th>ZWINT</th>\n",
       "      <th>ZXDA</th>\n",
       "      <th>ZXDB</th>\n",
       "      <th>ZYG11A</th>\n",
       "      <th>ZYG11B</th>\n",
       "      <th>ZYX</th>\n",
       "      <th>ZZEF1</th>\n",
       "      <th>ZZZ3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM494556</th>\n",
       "      <td>5.234802</td>\n",
       "      <td>11.922797</td>\n",
       "      <td>5.031032</td>\n",
       "      <td>9.141089</td>\n",
       "      <td>9.934807</td>\n",
       "      <td>6.868094</td>\n",
       "      <td>5.038721</td>\n",
       "      <td>6.845863</td>\n",
       "      <td>7.877033</td>\n",
       "      <td>9.201101</td>\n",
       "      <td>...</td>\n",
       "      <td>7.149422</td>\n",
       "      <td>7.737312</td>\n",
       "      <td>8.386004</td>\n",
       "      <td>5.994052</td>\n",
       "      <td>7.685643</td>\n",
       "      <td>4.546110</td>\n",
       "      <td>8.870484</td>\n",
       "      <td>7.938569</td>\n",
       "      <td>7.596789</td>\n",
       "      <td>8.049103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM494557</th>\n",
       "      <td>5.069035</td>\n",
       "      <td>11.146006</td>\n",
       "      <td>4.737330</td>\n",
       "      <td>8.926558</td>\n",
       "      <td>4.419542</td>\n",
       "      <td>3.276470</td>\n",
       "      <td>7.517926</td>\n",
       "      <td>6.945466</td>\n",
       "      <td>7.387878</td>\n",
       "      <td>9.279903</td>\n",
       "      <td>...</td>\n",
       "      <td>7.307666</td>\n",
       "      <td>7.693829</td>\n",
       "      <td>9.986055</td>\n",
       "      <td>5.808656</td>\n",
       "      <td>5.968874</td>\n",
       "      <td>4.979624</td>\n",
       "      <td>9.177783</td>\n",
       "      <td>7.976926</td>\n",
       "      <td>7.044507</td>\n",
       "      <td>8.192161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM494558</th>\n",
       "      <td>5.514972</td>\n",
       "      <td>12.378934</td>\n",
       "      <td>6.990395</td>\n",
       "      <td>7.268946</td>\n",
       "      <td>4.253987</td>\n",
       "      <td>2.978153</td>\n",
       "      <td>6.286073</td>\n",
       "      <td>7.201963</td>\n",
       "      <td>7.125318</td>\n",
       "      <td>10.170862</td>\n",
       "      <td>...</td>\n",
       "      <td>6.886556</td>\n",
       "      <td>7.927103</td>\n",
       "      <td>8.124558</td>\n",
       "      <td>5.526909</td>\n",
       "      <td>6.000892</td>\n",
       "      <td>4.951939</td>\n",
       "      <td>8.613027</td>\n",
       "      <td>8.642108</td>\n",
       "      <td>7.747791</td>\n",
       "      <td>7.947040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM494559</th>\n",
       "      <td>6.871695</td>\n",
       "      <td>11.853862</td>\n",
       "      <td>4.589314</td>\n",
       "      <td>8.874169</td>\n",
       "      <td>5.911853</td>\n",
       "      <td>4.412516</td>\n",
       "      <td>6.304975</td>\n",
       "      <td>7.731857</td>\n",
       "      <td>7.300380</td>\n",
       "      <td>8.649045</td>\n",
       "      <td>...</td>\n",
       "      <td>7.939107</td>\n",
       "      <td>8.589020</td>\n",
       "      <td>9.673297</td>\n",
       "      <td>6.190925</td>\n",
       "      <td>6.736635</td>\n",
       "      <td>4.765782</td>\n",
       "      <td>9.643763</td>\n",
       "      <td>7.295604</td>\n",
       "      <td>7.839339</td>\n",
       "      <td>8.377581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM494560</th>\n",
       "      <td>6.761781</td>\n",
       "      <td>11.200515</td>\n",
       "      <td>5.001184</td>\n",
       "      <td>9.027746</td>\n",
       "      <td>5.356248</td>\n",
       "      <td>3.515208</td>\n",
       "      <td>5.545497</td>\n",
       "      <td>7.552539</td>\n",
       "      <td>7.309306</td>\n",
       "      <td>9.229319</td>\n",
       "      <td>...</td>\n",
       "      <td>7.833734</td>\n",
       "      <td>8.689572</td>\n",
       "      <td>10.304345</td>\n",
       "      <td>6.090843</td>\n",
       "      <td>6.703918</td>\n",
       "      <td>5.821131</td>\n",
       "      <td>9.187349</td>\n",
       "      <td>7.557380</td>\n",
       "      <td>7.320086</td>\n",
       "      <td>8.827688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 10077 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               A1BG        A2M   A2M-AS1      AACS     AADAC   AADACP1  \\\n",
       "GSM494556  5.234802  11.922797  5.031032  9.141089  9.934807  6.868094   \n",
       "GSM494557  5.069035  11.146006  4.737330  8.926558  4.419542  3.276470   \n",
       "GSM494558  5.514972  12.378934  6.990395  7.268946  4.253987  2.978153   \n",
       "GSM494559  6.871695  11.853862  4.589314  8.874169  5.911853  4.412516   \n",
       "GSM494560  6.761781  11.200515  5.001184  9.027746  5.356248  3.515208   \n",
       "\n",
       "              AADAT     AAED1     AAGAB       AAK1  ...      ZW10    ZWILCH  \\\n",
       "GSM494556  5.038721  6.845863  7.877033   9.201101  ...  7.149422  7.737312   \n",
       "GSM494557  7.517926  6.945466  7.387878   9.279903  ...  7.307666  7.693829   \n",
       "GSM494558  6.286073  7.201963  7.125318  10.170862  ...  6.886556  7.927103   \n",
       "GSM494559  6.304975  7.731857  7.300380   8.649045  ...  7.939107  8.589020   \n",
       "GSM494560  5.545497  7.552539  7.309306   9.229319  ...  7.833734  8.689572   \n",
       "\n",
       "               ZWINT      ZXDA      ZXDB    ZYG11A    ZYG11B       ZYX  \\\n",
       "GSM494556   8.386004  5.994052  7.685643  4.546110  8.870484  7.938569   \n",
       "GSM494557   9.986055  5.808656  5.968874  4.979624  9.177783  7.976926   \n",
       "GSM494558   8.124558  5.526909  6.000892  4.951939  8.613027  8.642108   \n",
       "GSM494559   9.673297  6.190925  6.736635  4.765782  9.643763  7.295604   \n",
       "GSM494560  10.304345  6.090843  6.703918  5.821131  9.187349  7.557380   \n",
       "\n",
       "              ZZEF1      ZZZ3  \n",
       "GSM494556  7.596789  8.049103  \n",
       "GSM494557  7.044507  8.192161  \n",
       "GSM494558  7.747791  7.947040  \n",
       "GSM494559  7.839339  8.377581  \n",
       "GSM494560  7.320086  8.827688  \n",
       "\n",
       "[5 rows x 10077 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To sort samples by their names (index), use sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2M-AS1</th>\n",
       "      <th>AACS</th>\n",
       "      <th>AADAC</th>\n",
       "      <th>AADACP1</th>\n",
       "      <th>AADAT</th>\n",
       "      <th>AAED1</th>\n",
       "      <th>AAGAB</th>\n",
       "      <th>AAK1</th>\n",
       "      <th>...</th>\n",
       "      <th>ZW10</th>\n",
       "      <th>ZWILCH</th>\n",
       "      <th>ZWINT</th>\n",
       "      <th>ZXDA</th>\n",
       "      <th>ZXDB</th>\n",
       "      <th>ZYG11A</th>\n",
       "      <th>ZYG11B</th>\n",
       "      <th>ZYX</th>\n",
       "      <th>ZZEF1</th>\n",
       "      <th>ZZZ3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM1213669</th>\n",
       "      <td>6.193788</td>\n",
       "      <td>11.456917</td>\n",
       "      <td>5.689782</td>\n",
       "      <td>8.199319</td>\n",
       "      <td>7.532517</td>\n",
       "      <td>4.194560</td>\n",
       "      <td>6.245118</td>\n",
       "      <td>7.665522</td>\n",
       "      <td>7.901115</td>\n",
       "      <td>9.770302</td>\n",
       "      <td>...</td>\n",
       "      <td>7.170371</td>\n",
       "      <td>8.121904</td>\n",
       "      <td>8.615240</td>\n",
       "      <td>5.969291</td>\n",
       "      <td>6.094105</td>\n",
       "      <td>4.733078</td>\n",
       "      <td>9.215152</td>\n",
       "      <td>8.633705</td>\n",
       "      <td>7.353348</td>\n",
       "      <td>8.423737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213670</th>\n",
       "      <td>5.120598</td>\n",
       "      <td>11.842579</td>\n",
       "      <td>6.138619</td>\n",
       "      <td>7.932785</td>\n",
       "      <td>4.931691</td>\n",
       "      <td>3.320761</td>\n",
       "      <td>5.697312</td>\n",
       "      <td>7.946679</td>\n",
       "      <td>7.568891</td>\n",
       "      <td>9.095166</td>\n",
       "      <td>...</td>\n",
       "      <td>6.887829</td>\n",
       "      <td>8.963497</td>\n",
       "      <td>9.008828</td>\n",
       "      <td>5.952883</td>\n",
       "      <td>6.919187</td>\n",
       "      <td>4.087901</td>\n",
       "      <td>8.990816</td>\n",
       "      <td>7.869778</td>\n",
       "      <td>7.392957</td>\n",
       "      <td>8.909693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213671</th>\n",
       "      <td>5.402096</td>\n",
       "      <td>13.043572</td>\n",
       "      <td>5.814747</td>\n",
       "      <td>7.206544</td>\n",
       "      <td>4.720090</td>\n",
       "      <td>3.524562</td>\n",
       "      <td>5.714073</td>\n",
       "      <td>7.569847</td>\n",
       "      <td>7.918409</td>\n",
       "      <td>8.873760</td>\n",
       "      <td>...</td>\n",
       "      <td>7.222160</td>\n",
       "      <td>8.276343</td>\n",
       "      <td>7.435106</td>\n",
       "      <td>5.945671</td>\n",
       "      <td>6.569925</td>\n",
       "      <td>5.703190</td>\n",
       "      <td>9.644874</td>\n",
       "      <td>7.983500</td>\n",
       "      <td>7.356464</td>\n",
       "      <td>8.646802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213672</th>\n",
       "      <td>6.148757</td>\n",
       "      <td>12.168832</td>\n",
       "      <td>5.086257</td>\n",
       "      <td>7.597157</td>\n",
       "      <td>5.225023</td>\n",
       "      <td>3.530673</td>\n",
       "      <td>5.493415</td>\n",
       "      <td>7.038573</td>\n",
       "      <td>7.614910</td>\n",
       "      <td>9.024537</td>\n",
       "      <td>...</td>\n",
       "      <td>7.563612</td>\n",
       "      <td>8.544809</td>\n",
       "      <td>8.475542</td>\n",
       "      <td>6.202998</td>\n",
       "      <td>6.333337</td>\n",
       "      <td>5.134714</td>\n",
       "      <td>9.222998</td>\n",
       "      <td>8.485008</td>\n",
       "      <td>7.093152</td>\n",
       "      <td>8.391062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213673</th>\n",
       "      <td>5.764026</td>\n",
       "      <td>12.690362</td>\n",
       "      <td>5.597297</td>\n",
       "      <td>7.843723</td>\n",
       "      <td>6.476748</td>\n",
       "      <td>4.557961</td>\n",
       "      <td>6.050574</td>\n",
       "      <td>7.931209</td>\n",
       "      <td>7.695850</td>\n",
       "      <td>9.452556</td>\n",
       "      <td>...</td>\n",
       "      <td>7.532166</td>\n",
       "      <td>8.350695</td>\n",
       "      <td>8.598059</td>\n",
       "      <td>6.597626</td>\n",
       "      <td>7.478894</td>\n",
       "      <td>5.735816</td>\n",
       "      <td>9.501917</td>\n",
       "      <td>8.904271</td>\n",
       "      <td>7.644910</td>\n",
       "      <td>8.388468</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 10077 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                A1BG        A2M   A2M-AS1      AACS     AADAC   AADACP1  \\\n",
       "GSM1213669  6.193788  11.456917  5.689782  8.199319  7.532517  4.194560   \n",
       "GSM1213670  5.120598  11.842579  6.138619  7.932785  4.931691  3.320761   \n",
       "GSM1213671  5.402096  13.043572  5.814747  7.206544  4.720090  3.524562   \n",
       "GSM1213672  6.148757  12.168832  5.086257  7.597157  5.225023  3.530673   \n",
       "GSM1213673  5.764026  12.690362  5.597297  7.843723  6.476748  4.557961   \n",
       "\n",
       "               AADAT     AAED1     AAGAB      AAK1  ...      ZW10    ZWILCH  \\\n",
       "GSM1213669  6.245118  7.665522  7.901115  9.770302  ...  7.170371  8.121904   \n",
       "GSM1213670  5.697312  7.946679  7.568891  9.095166  ...  6.887829  8.963497   \n",
       "GSM1213671  5.714073  7.569847  7.918409  8.873760  ...  7.222160  8.276343   \n",
       "GSM1213672  5.493415  7.038573  7.614910  9.024537  ...  7.563612  8.544809   \n",
       "GSM1213673  6.050574  7.931209  7.695850  9.452556  ...  7.532166  8.350695   \n",
       "\n",
       "               ZWINT      ZXDA      ZXDB    ZYG11A    ZYG11B       ZYX  \\\n",
       "GSM1213669  8.615240  5.969291  6.094105  4.733078  9.215152  8.633705   \n",
       "GSM1213670  9.008828  5.952883  6.919187  4.087901  8.990816  7.869778   \n",
       "GSM1213671  7.435106  5.945671  6.569925  5.703190  9.644874  7.983500   \n",
       "GSM1213672  8.475542  6.202998  6.333337  5.134714  9.222998  8.485008   \n",
       "GSM1213673  8.598059  6.597626  7.478894  5.735816  9.501917  8.904271   \n",
       "\n",
       "               ZZEF1      ZZZ3  \n",
       "GSM1213669  7.353348  8.423737  \n",
       "GSM1213670  7.392957  8.909693  \n",
       "GSM1213671  7.356464  8.646802  \n",
       "GSM1213672  7.093152  8.391062  \n",
       "GSM1213673  7.644910  8.388468  \n",
       "\n",
       "[5 rows x 10077 columns]"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.sort_index()\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We have a separate metadata file. Read it in as `meta` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source Name</th>\n",
       "      <th>Characteristics[organism]</th>\n",
       "      <th>Characteristics[GEO dataset]</th>\n",
       "      <th>Characteristics[GEO sample accession]</th>\n",
       "      <th>Characteristics[age]</th>\n",
       "      <th>Unit[time unit]</th>\n",
       "      <th>Characteristics[sex]</th>\n",
       "      <th>Characteristics[ethnic group ]</th>\n",
       "      <th>Characteristics[disease]</th>\n",
       "      <th>Characteristics[disease staging]</th>\n",
       "      <th>Characteristics[disease histology]</th>\n",
       "      <th>Characteristics[overall survival]</th>\n",
       "      <th>Unit[time unit].1</th>\n",
       "      <th>Characteristics[organism status]</th>\n",
       "      <th>Characteristics[clinical history]</th>\n",
       "      <th>Characteristics[TNM staging]</th>\n",
       "      <th>Characteristics[recurrence]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sample 194</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE19188</td>\n",
       "      <td>GSM475729</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>normal</td>\n",
       "      <td>2</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>20.9095812</td>\n",
       "      <td>month</td>\n",
       "      <td>dead at endpoint</td>\n",
       "      <td>Ever-smoker</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sample 188</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE19188</td>\n",
       "      <td>GSM475723</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>female</td>\n",
       "      <td>not available</td>\n",
       "      <td>normal</td>\n",
       "      <td>2</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>8.5150653</td>\n",
       "      <td>month</td>\n",
       "      <td>alive at endpoint</td>\n",
       "      <td>Never-smoker</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sample 167</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE19188</td>\n",
       "      <td>GSM475702</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>normal</td>\n",
       "      <td>2</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>28.0438251</td>\n",
       "      <td>month</td>\n",
       "      <td>alive at endpoint</td>\n",
       "      <td>Never-smoker</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sample 204</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE19188</td>\n",
       "      <td>GSM475739</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>1B</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>66.0492903</td>\n",
       "      <td>month</td>\n",
       "      <td>dead at endpoint</td>\n",
       "      <td>Ever-smoker</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sample 196</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE19188</td>\n",
       "      <td>GSM475731</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>2</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>65.9177835</td>\n",
       "      <td>month</td>\n",
       "      <td>dead at endpoint</td>\n",
       "      <td>Ever-smoker</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Source Name Characteristics[organism] Characteristics[GEO dataset]  \\\n",
       "0  Sample 194              Homo sapiens                     GSE19188   \n",
       "1  Sample 188              Homo sapiens                     GSE19188   \n",
       "2  Sample 167              Homo sapiens                     GSE19188   \n",
       "3  Sample 204              Homo sapiens                     GSE19188   \n",
       "4  Sample 196              Homo sapiens                     GSE19188   \n",
       "\n",
       "  Characteristics[GEO sample accession] Characteristics[age] Unit[time unit]  \\\n",
       "0                             GSM475729        not available                   \n",
       "1                             GSM475723        not available                   \n",
       "2                             GSM475702        not available                   \n",
       "3                             GSM475739        not available                   \n",
       "4                             GSM475731        not available                   \n",
       "\n",
       "  Characteristics[sex] Characteristics[ethnic group ]  \\\n",
       "0                 male                  not available   \n",
       "1               female                  not available   \n",
       "2                 male                  not available   \n",
       "3                 male                  not available   \n",
       "4                 male                  not available   \n",
       "\n",
       "        Characteristics[disease] Characteristics[disease staging]  \\\n",
       "0                         normal                                2   \n",
       "1                         normal                                2   \n",
       "2                         normal                                2   \n",
       "3  non-small cell lung carcinoma                               1B   \n",
       "4  non-small cell lung carcinoma                                2   \n",
       "\n",
       "  Characteristics[disease histology] Characteristics[overall survival]  \\\n",
       "0           adenocarcinoma histology                        20.9095812   \n",
       "1           adenocarcinoma histology                         8.5150653   \n",
       "2           adenocarcinoma histology                        28.0438251   \n",
       "3           adenocarcinoma histology                        66.0492903   \n",
       "4           adenocarcinoma histology                        65.9177835   \n",
       "\n",
       "  Unit[time unit].1 Characteristics[organism status]  \\\n",
       "0             month                 dead at endpoint   \n",
       "1             month                alive at endpoint   \n",
       "2             month                alive at endpoint   \n",
       "3             month                 dead at endpoint   \n",
       "4             month                 dead at endpoint   \n",
       "\n",
       "  Characteristics[clinical history] Characteristics[TNM staging]  \\\n",
       "0                       Ever-smoker                not available   \n",
       "1                      Never-smoker                not available   \n",
       "2                      Never-smoker                not available   \n",
       "3                       Ever-smoker                not available   \n",
       "4                       Ever-smoker                not available   \n",
       "\n",
       "  Characteristics[recurrence]  \n",
       "0               not available  \n",
       "1               not available  \n",
       "2               not available  \n",
       "3               not available  \n",
       "4               not available  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meta = pd.read_csv(\"data/metadata_nsmlc.txt\",delimiter=\"\\t\").iloc[:,0:17]\n",
    "meta.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Source Name', 'Characteristics[organism]',\n",
      "       'Characteristics[GEO dataset]', 'Characteristics[GEO sample accession]',\n",
      "       'Characteristics[age]', 'Unit[time unit]', 'Characteristics[sex]',\n",
      "       'Characteristics[ethnic group ]', 'Characteristics[disease]',\n",
      "       'Characteristics[disease staging]',\n",
      "       'Characteristics[disease histology]',\n",
      "       'Characteristics[overall survival]', 'Unit[time unit].1',\n",
      "       'Characteristics[organism status]', 'Characteristics[clinical history]',\n",
      "       'Characteristics[TNM staging]', 'Characteristics[recurrence]'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(meta.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean the data\n",
    "meta.columns = [\"Sample\",\"organism\",\"GEO_dataset\",\"GEO_sample_accession\",\"age\",\"time_unit\",\"sex\",\"ethnic_group\",\"disease\", \"disease_staging\",\"disease_histology\",\"overall_survival\",\"time_unit_2\", \"organism_status\", \"clinical_history\",\"TNM_staging\",\"recurrence\" ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's see how the first row looks like using .iloc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sample                                Sample 188\n",
       "organism                            Homo sapiens\n",
       "GEO_dataset                             GSE19188\n",
       "GEO_sample_accession                   GSM475723\n",
       "age                                not available\n",
       "time_unit                                       \n",
       "sex                                       female\n",
       "ethnic_group                       not available\n",
       "disease                                   normal\n",
       "disease_staging                                2\n",
       "disease_histology       adenocarcinoma histology\n",
       "overall_survival                       8.5150653\n",
       "time_unit_2                                month\n",
       "organism_status                alive at endpoint\n",
       "clinical_history                    Never-smoker\n",
       "TNM_staging                        not available\n",
       "recurrence                         not available\n",
       "Name: 1, dtype: object"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meta.iloc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Notice that the two GEO_sample_accession between two tables are the same but not matching their orders! Try to get the same order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample</th>\n",
       "      <th>organism</th>\n",
       "      <th>GEO_dataset</th>\n",
       "      <th>age</th>\n",
       "      <th>time_unit</th>\n",
       "      <th>sex</th>\n",
       "      <th>ethnic_group</th>\n",
       "      <th>disease</th>\n",
       "      <th>disease_staging</th>\n",
       "      <th>disease_histology</th>\n",
       "      <th>overall_survival</th>\n",
       "      <th>time_unit_2</th>\n",
       "      <th>organism_status</th>\n",
       "      <th>clinical_history</th>\n",
       "      <th>TNM_staging</th>\n",
       "      <th>recurrence</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO_sample_accession</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM1213669</th>\n",
       "      <td>Sample 529</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE50081</td>\n",
       "      <td>63.57</td>\n",
       "      <td>year</td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>not available</td>\n",
       "      <td>adenocarcinoma histology</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>not available</td>\n",
       "      <td>not availabe</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213670</th>\n",
       "      <td>Sample 530</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE50081</td>\n",
       "      <td>68.15</td>\n",
       "      <td>year</td>\n",
       "      <td>female</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>not available</td>\n",
       "      <td>not availabe</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213671</th>\n",
       "      <td>Sample 531</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE50081</td>\n",
       "      <td>69.15</td>\n",
       "      <td>year</td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>not available</td>\n",
       "      <td>not availabe</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213672</th>\n",
       "      <td>Sample 532</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE50081</td>\n",
       "      <td>82.36</td>\n",
       "      <td>year</td>\n",
       "      <td>female</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>not available</td>\n",
       "      <td>normal histology</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>not available</td>\n",
       "      <td>not availabe</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213673</th>\n",
       "      <td>Sample 533</td>\n",
       "      <td>Homo sapiens</td>\n",
       "      <td>GSE50081</td>\n",
       "      <td>68</td>\n",
       "      <td>year</td>\n",
       "      <td>male</td>\n",
       "      <td>not available</td>\n",
       "      <td>non-small cell lung carcinoma</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "      <td></td>\n",
       "      <td>not available</td>\n",
       "      <td>not availabe</td>\n",
       "      <td>not available</td>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Sample      organism GEO_dataset    age time_unit  \\\n",
       "GEO_sample_accession                                                          \n",
       "GSM1213669            Sample 529  Homo sapiens    GSE50081  63.57      year   \n",
       "GSM1213670            Sample 530  Homo sapiens    GSE50081  68.15      year   \n",
       "GSM1213671            Sample 531  Homo sapiens    GSE50081  69.15      year   \n",
       "GSM1213672            Sample 532  Homo sapiens    GSE50081  82.36      year   \n",
       "GSM1213673            Sample 533  Homo sapiens    GSE50081     68      year   \n",
       "\n",
       "                         sex   ethnic_group                        disease  \\\n",
       "GEO_sample_accession                                                         \n",
       "GSM1213669              male  not available  non-small cell lung carcinoma   \n",
       "GSM1213670            female  not available  non-small cell lung carcinoma   \n",
       "GSM1213671              male  not available  non-small cell lung carcinoma   \n",
       "GSM1213672            female  not available  non-small cell lung carcinoma   \n",
       "GSM1213673              male  not available  non-small cell lung carcinoma   \n",
       "\n",
       "                     disease_staging         disease_histology  \\\n",
       "GEO_sample_accession                                             \n",
       "GSM1213669             not available  adenocarcinoma histology   \n",
       "GSM1213670             not available             not available   \n",
       "GSM1213671             not available             not available   \n",
       "GSM1213672             not available          normal histology   \n",
       "GSM1213673             not available             not available   \n",
       "\n",
       "                     overall_survival time_unit_2 organism_status  \\\n",
       "GEO_sample_accession                                                \n",
       "GSM1213669              not available               not available   \n",
       "GSM1213670              not available               not available   \n",
       "GSM1213671              not available               not available   \n",
       "GSM1213672              not available               not available   \n",
       "GSM1213673              not available               not available   \n",
       "\n",
       "                     clinical_history    TNM_staging     recurrence  \n",
       "GEO_sample_accession                                                 \n",
       "GSM1213669               not availabe  not available  not available  \n",
       "GSM1213670               not availabe  not available  not available  \n",
       "GSM1213671               not availabe  not available  not available  \n",
       "GSM1213672               not availabe  not available  not available  \n",
       "GSM1213673               not availabe  not available  not available  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meta_sorted = meta.set_index(\"GEO_sample_accession\")\n",
    "meta_sorted = meta_sorted.sort_index()\n",
    "meta_sorted.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's begin Linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build target vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_survival</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO_sample_accession</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM1213669</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213670</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213671</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213672</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213673</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773781</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773782</th>\n",
       "      <td>98.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773783</th>\n",
       "      <td>116.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773784</th>\n",
       "      <td>not available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773785</th>\n",
       "      <td>22.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1118 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     overall_survival\n",
       "GEO_sample_accession                 \n",
       "GSM1213669              not available\n",
       "GSM1213670              not available\n",
       "GSM1213671              not available\n",
       "GSM1213672              not available\n",
       "GSM1213673              not available\n",
       "...                               ...\n",
       "GSM773781               not available\n",
       "GSM773782                        98.5\n",
       "GSM773783                      116.83\n",
       "GSM773784               not available\n",
       "GSM773785                       22.57\n",
       "\n",
       "[1118 rows x 1 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = meta_sorted[[\"overall_survival\"]]\n",
    "y "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We want to get rid of non-informative data here in \"short\", \"long\", \"not available\" and keep only continuous data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y[~y.overall_survival.isin([\"Short\",\"long\",\"not available\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure y is float type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_survival</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO_sample_accession</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM1213677</th>\n",
       "      <td>76.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213678</th>\n",
       "      <td>124.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213684</th>\n",
       "      <td>98.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213685</th>\n",
       "      <td>59.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213686</th>\n",
       "      <td>29.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773777</th>\n",
       "      <td>100.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773780</th>\n",
       "      <td>71.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773782</th>\n",
       "      <td>98.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773783</th>\n",
       "      <td>116.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773785</th>\n",
       "      <td>22.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>489 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      overall_survival\n",
       "GEO_sample_accession                  \n",
       "GSM1213677                       76.68\n",
       "GSM1213678                      124.83\n",
       "GSM1213684                       98.93\n",
       "GSM1213685                       59.16\n",
       "GSM1213686                       29.27\n",
       "...                                ...\n",
       "GSM773777                       100.08\n",
       "GSM773780                        71.88\n",
       "GSM773782                        98.50\n",
       "GSM773783                       116.83\n",
       "GSM773785                        22.57\n",
       "\n",
       "[489 rows x 1 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = y.astype(dtype=float)\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build feature X dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select X with corresponding filtered y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2M-AS1</th>\n",
       "      <th>AACS</th>\n",
       "      <th>AADAC</th>\n",
       "      <th>AADACP1</th>\n",
       "      <th>AADAT</th>\n",
       "      <th>AAED1</th>\n",
       "      <th>AAGAB</th>\n",
       "      <th>AAK1</th>\n",
       "      <th>...</th>\n",
       "      <th>ZW10</th>\n",
       "      <th>ZWILCH</th>\n",
       "      <th>ZWINT</th>\n",
       "      <th>ZXDA</th>\n",
       "      <th>ZXDB</th>\n",
       "      <th>ZYG11A</th>\n",
       "      <th>ZYG11B</th>\n",
       "      <th>ZYX</th>\n",
       "      <th>ZZEF1</th>\n",
       "      <th>ZZZ3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>GSM1213677</th>\n",
       "      <td>6.234404</td>\n",
       "      <td>10.573307</td>\n",
       "      <td>5.426271</td>\n",
       "      <td>8.454230</td>\n",
       "      <td>8.655138</td>\n",
       "      <td>4.119727</td>\n",
       "      <td>6.227409</td>\n",
       "      <td>7.879545</td>\n",
       "      <td>7.993885</td>\n",
       "      <td>9.200983</td>\n",
       "      <td>...</td>\n",
       "      <td>8.005472</td>\n",
       "      <td>8.577231</td>\n",
       "      <td>10.489858</td>\n",
       "      <td>6.728552</td>\n",
       "      <td>7.450993</td>\n",
       "      <td>4.795083</td>\n",
       "      <td>9.168757</td>\n",
       "      <td>8.157977</td>\n",
       "      <td>7.324282</td>\n",
       "      <td>8.403492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213678</th>\n",
       "      <td>5.614969</td>\n",
       "      <td>12.649021</td>\n",
       "      <td>4.906902</td>\n",
       "      <td>7.841920</td>\n",
       "      <td>4.880604</td>\n",
       "      <td>3.277062</td>\n",
       "      <td>5.621714</td>\n",
       "      <td>8.298232</td>\n",
       "      <td>8.134408</td>\n",
       "      <td>8.660739</td>\n",
       "      <td>...</td>\n",
       "      <td>7.708346</td>\n",
       "      <td>8.180740</td>\n",
       "      <td>8.655613</td>\n",
       "      <td>5.654629</td>\n",
       "      <td>6.329663</td>\n",
       "      <td>4.983588</td>\n",
       "      <td>9.303903</td>\n",
       "      <td>8.100671</td>\n",
       "      <td>7.170583</td>\n",
       "      <td>8.250116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213684</th>\n",
       "      <td>5.548329</td>\n",
       "      <td>10.762547</td>\n",
       "      <td>4.354525</td>\n",
       "      <td>9.020604</td>\n",
       "      <td>5.069924</td>\n",
       "      <td>3.340867</td>\n",
       "      <td>6.397452</td>\n",
       "      <td>7.496052</td>\n",
       "      <td>7.475415</td>\n",
       "      <td>8.589328</td>\n",
       "      <td>...</td>\n",
       "      <td>8.474163</td>\n",
       "      <td>8.395992</td>\n",
       "      <td>9.106891</td>\n",
       "      <td>6.260503</td>\n",
       "      <td>7.290004</td>\n",
       "      <td>5.697684</td>\n",
       "      <td>9.348159</td>\n",
       "      <td>8.156976</td>\n",
       "      <td>7.579798</td>\n",
       "      <td>8.240718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213685</th>\n",
       "      <td>5.119513</td>\n",
       "      <td>13.069068</td>\n",
       "      <td>5.120971</td>\n",
       "      <td>7.870464</td>\n",
       "      <td>4.629495</td>\n",
       "      <td>3.647566</td>\n",
       "      <td>6.507356</td>\n",
       "      <td>7.911253</td>\n",
       "      <td>7.738755</td>\n",
       "      <td>8.165147</td>\n",
       "      <td>...</td>\n",
       "      <td>7.492370</td>\n",
       "      <td>8.796397</td>\n",
       "      <td>6.787052</td>\n",
       "      <td>6.176711</td>\n",
       "      <td>7.316321</td>\n",
       "      <td>3.929319</td>\n",
       "      <td>9.487116</td>\n",
       "      <td>7.712492</td>\n",
       "      <td>7.716616</td>\n",
       "      <td>9.165821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM1213686</th>\n",
       "      <td>5.237179</td>\n",
       "      <td>11.895123</td>\n",
       "      <td>4.635124</td>\n",
       "      <td>8.578635</td>\n",
       "      <td>5.540632</td>\n",
       "      <td>3.295144</td>\n",
       "      <td>5.618148</td>\n",
       "      <td>7.807078</td>\n",
       "      <td>8.462900</td>\n",
       "      <td>8.447660</td>\n",
       "      <td>...</td>\n",
       "      <td>7.374039</td>\n",
       "      <td>9.175988</td>\n",
       "      <td>8.982163</td>\n",
       "      <td>7.116609</td>\n",
       "      <td>8.216890</td>\n",
       "      <td>4.001701</td>\n",
       "      <td>9.235899</td>\n",
       "      <td>7.992402</td>\n",
       "      <td>7.334882</td>\n",
       "      <td>8.526736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773777</th>\n",
       "      <td>5.481670</td>\n",
       "      <td>13.145887</td>\n",
       "      <td>5.909043</td>\n",
       "      <td>7.346026</td>\n",
       "      <td>6.873464</td>\n",
       "      <td>3.875660</td>\n",
       "      <td>5.866887</td>\n",
       "      <td>7.973257</td>\n",
       "      <td>7.522829</td>\n",
       "      <td>9.065589</td>\n",
       "      <td>...</td>\n",
       "      <td>7.257052</td>\n",
       "      <td>7.423337</td>\n",
       "      <td>7.008431</td>\n",
       "      <td>6.613495</td>\n",
       "      <td>7.063822</td>\n",
       "      <td>4.169484</td>\n",
       "      <td>9.303364</td>\n",
       "      <td>8.935370</td>\n",
       "      <td>8.136294</td>\n",
       "      <td>8.242303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773780</th>\n",
       "      <td>5.334847</td>\n",
       "      <td>13.271122</td>\n",
       "      <td>5.658552</td>\n",
       "      <td>7.833567</td>\n",
       "      <td>7.541371</td>\n",
       "      <td>3.743997</td>\n",
       "      <td>5.656434</td>\n",
       "      <td>8.577467</td>\n",
       "      <td>7.591066</td>\n",
       "      <td>8.916864</td>\n",
       "      <td>...</td>\n",
       "      <td>7.303059</td>\n",
       "      <td>7.340547</td>\n",
       "      <td>7.355154</td>\n",
       "      <td>6.101784</td>\n",
       "      <td>7.008633</td>\n",
       "      <td>4.268576</td>\n",
       "      <td>9.264532</td>\n",
       "      <td>8.546761</td>\n",
       "      <td>8.020863</td>\n",
       "      <td>7.944189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773782</th>\n",
       "      <td>5.421323</td>\n",
       "      <td>13.050959</td>\n",
       "      <td>6.121947</td>\n",
       "      <td>7.786562</td>\n",
       "      <td>7.212554</td>\n",
       "      <td>4.234438</td>\n",
       "      <td>5.715317</td>\n",
       "      <td>7.749499</td>\n",
       "      <td>7.401864</td>\n",
       "      <td>9.249216</td>\n",
       "      <td>...</td>\n",
       "      <td>7.098990</td>\n",
       "      <td>7.631896</td>\n",
       "      <td>7.154290</td>\n",
       "      <td>6.204096</td>\n",
       "      <td>6.975268</td>\n",
       "      <td>4.177804</td>\n",
       "      <td>8.980659</td>\n",
       "      <td>9.189151</td>\n",
       "      <td>8.185438</td>\n",
       "      <td>7.969923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773783</th>\n",
       "      <td>5.314954</td>\n",
       "      <td>13.087376</td>\n",
       "      <td>6.084499</td>\n",
       "      <td>7.242738</td>\n",
       "      <td>6.502152</td>\n",
       "      <td>3.811591</td>\n",
       "      <td>5.402475</td>\n",
       "      <td>8.019030</td>\n",
       "      <td>7.572606</td>\n",
       "      <td>9.267872</td>\n",
       "      <td>...</td>\n",
       "      <td>6.818446</td>\n",
       "      <td>7.560952</td>\n",
       "      <td>7.297480</td>\n",
       "      <td>5.817039</td>\n",
       "      <td>7.047374</td>\n",
       "      <td>4.147316</td>\n",
       "      <td>8.762204</td>\n",
       "      <td>8.706924</td>\n",
       "      <td>8.147528</td>\n",
       "      <td>7.873016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GSM773785</th>\n",
       "      <td>4.975610</td>\n",
       "      <td>13.037546</td>\n",
       "      <td>5.996415</td>\n",
       "      <td>7.703542</td>\n",
       "      <td>5.433341</td>\n",
       "      <td>3.877548</td>\n",
       "      <td>5.916822</td>\n",
       "      <td>8.052180</td>\n",
       "      <td>7.771685</td>\n",
       "      <td>9.045769</td>\n",
       "      <td>...</td>\n",
       "      <td>6.895099</td>\n",
       "      <td>7.365076</td>\n",
       "      <td>7.362915</td>\n",
       "      <td>6.237148</td>\n",
       "      <td>6.218126</td>\n",
       "      <td>4.279166</td>\n",
       "      <td>8.938568</td>\n",
       "      <td>8.836254</td>\n",
       "      <td>8.233001</td>\n",
       "      <td>7.647830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>489 rows × 10077 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                A1BG        A2M   A2M-AS1      AACS     AADAC   AADACP1  \\\n",
       "GSM1213677  6.234404  10.573307  5.426271  8.454230  8.655138  4.119727   \n",
       "GSM1213678  5.614969  12.649021  4.906902  7.841920  4.880604  3.277062   \n",
       "GSM1213684  5.548329  10.762547  4.354525  9.020604  5.069924  3.340867   \n",
       "GSM1213685  5.119513  13.069068  5.120971  7.870464  4.629495  3.647566   \n",
       "GSM1213686  5.237179  11.895123  4.635124  8.578635  5.540632  3.295144   \n",
       "...              ...        ...       ...       ...       ...       ...   \n",
       "GSM773777   5.481670  13.145887  5.909043  7.346026  6.873464  3.875660   \n",
       "GSM773780   5.334847  13.271122  5.658552  7.833567  7.541371  3.743997   \n",
       "GSM773782   5.421323  13.050959  6.121947  7.786562  7.212554  4.234438   \n",
       "GSM773783   5.314954  13.087376  6.084499  7.242738  6.502152  3.811591   \n",
       "GSM773785   4.975610  13.037546  5.996415  7.703542  5.433341  3.877548   \n",
       "\n",
       "               AADAT     AAED1     AAGAB      AAK1  ...      ZW10    ZWILCH  \\\n",
       "GSM1213677  6.227409  7.879545  7.993885  9.200983  ...  8.005472  8.577231   \n",
       "GSM1213678  5.621714  8.298232  8.134408  8.660739  ...  7.708346  8.180740   \n",
       "GSM1213684  6.397452  7.496052  7.475415  8.589328  ...  8.474163  8.395992   \n",
       "GSM1213685  6.507356  7.911253  7.738755  8.165147  ...  7.492370  8.796397   \n",
       "GSM1213686  5.618148  7.807078  8.462900  8.447660  ...  7.374039  9.175988   \n",
       "...              ...       ...       ...       ...  ...       ...       ...   \n",
       "GSM773777   5.866887  7.973257  7.522829  9.065589  ...  7.257052  7.423337   \n",
       "GSM773780   5.656434  8.577467  7.591066  8.916864  ...  7.303059  7.340547   \n",
       "GSM773782   5.715317  7.749499  7.401864  9.249216  ...  7.098990  7.631896   \n",
       "GSM773783   5.402475  8.019030  7.572606  9.267872  ...  6.818446  7.560952   \n",
       "GSM773785   5.916822  8.052180  7.771685  9.045769  ...  6.895099  7.365076   \n",
       "\n",
       "                ZWINT      ZXDA      ZXDB    ZYG11A    ZYG11B       ZYX  \\\n",
       "GSM1213677  10.489858  6.728552  7.450993  4.795083  9.168757  8.157977   \n",
       "GSM1213678   8.655613  5.654629  6.329663  4.983588  9.303903  8.100671   \n",
       "GSM1213684   9.106891  6.260503  7.290004  5.697684  9.348159  8.156976   \n",
       "GSM1213685   6.787052  6.176711  7.316321  3.929319  9.487116  7.712492   \n",
       "GSM1213686   8.982163  7.116609  8.216890  4.001701  9.235899  7.992402   \n",
       "...               ...       ...       ...       ...       ...       ...   \n",
       "GSM773777    7.008431  6.613495  7.063822  4.169484  9.303364  8.935370   \n",
       "GSM773780    7.355154  6.101784  7.008633  4.268576  9.264532  8.546761   \n",
       "GSM773782    7.154290  6.204096  6.975268  4.177804  8.980659  9.189151   \n",
       "GSM773783    7.297480  5.817039  7.047374  4.147316  8.762204  8.706924   \n",
       "GSM773785    7.362915  6.237148  6.218126  4.279166  8.938568  8.836254   \n",
       "\n",
       "               ZZEF1      ZZZ3  \n",
       "GSM1213677  7.324282  8.403492  \n",
       "GSM1213678  7.170583  8.250116  \n",
       "GSM1213684  7.579798  8.240718  \n",
       "GSM1213685  7.716616  9.165821  \n",
       "GSM1213686  7.334882  8.526736  \n",
       "...              ...       ...  \n",
       "GSM773777   8.136294  8.242303  \n",
       "GSM773780   8.020863  7.944189  \n",
       "GSM773782   8.185438  7.969923  \n",
       "GSM773783   8.147528  7.873016  \n",
       "GSM773785   8.233001  7.647830  \n",
       "\n",
       "[489 rows x 10077 columns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data[data.index.isin(y.index)]\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set y as a numpy array and reshape to have (489, 1) array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y.overall_survival.values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Now you start to learn how to split the data into 2 sets: one for training and one for testing. If you don't specify, Python will split the data to 75% train and 25% test. Here you might want to test 30% of the data. [readthedocs](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train-test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import train_test_split from sklearn.model_selection\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=21)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the regressor: reg_all\n",
    "reg_all = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the regressor to the training data\n",
    "reg_all.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 22.70359324],\n",
       "       [ 59.50985763],\n",
       "       [ 40.09452139],\n",
       "       [ 30.4856723 ],\n",
       "       [ 66.30367395],\n",
       "       [ 56.43491171],\n",
       "       [ 59.64568043],\n",
       "       [ 27.53524666],\n",
       "       [ 81.95310037],\n",
       "       [ 23.41071411],\n",
       "       [ 39.40492161],\n",
       "       [ 48.20026609],\n",
       "       [ 54.99345172],\n",
       "       [  6.72529679],\n",
       "       [ 50.77652758],\n",
       "       [ 55.1155585 ],\n",
       "       [ 67.858724  ],\n",
       "       [ 61.1616108 ],\n",
       "       [ 59.63087825],\n",
       "       [ 64.54781821],\n",
       "       [ 41.09288294],\n",
       "       [ 53.75411387],\n",
       "       [ 49.22821805],\n",
       "       [ 30.26549086],\n",
       "       [ 53.18955542],\n",
       "       [ 22.92233379],\n",
       "       [ 72.91853078],\n",
       "       [ 55.26880202],\n",
       "       [ 77.02765356],\n",
       "       [ 63.04955904],\n",
       "       [ 58.27481883],\n",
       "       [ 39.07737639],\n",
       "       [ 67.35810814],\n",
       "       [ 66.9774969 ],\n",
       "       [ 36.28200938],\n",
       "       [ 83.70952328],\n",
       "       [ 40.26490521],\n",
       "       [ 20.00557511],\n",
       "       [ 36.5219075 ],\n",
       "       [ 76.41262799],\n",
       "       [ 68.80594031],\n",
       "       [ 12.51145168],\n",
       "       [ 50.94687712],\n",
       "       [ 19.47256381],\n",
       "       [ 73.07940603],\n",
       "       [ 56.14859346],\n",
       "       [ 55.83304663],\n",
       "       [ 60.34049601],\n",
       "       [ 36.51129794],\n",
       "       [ 61.46646946],\n",
       "       [ 40.44535999],\n",
       "       [ 77.10906388],\n",
       "       [ 44.14182777],\n",
       "       [ 38.03822918],\n",
       "       [ 50.69533656],\n",
       "       [116.12600947],\n",
       "       [ 51.79505594],\n",
       "       [ 76.93533279],\n",
       "       [ 59.0421886 ],\n",
       "       [ 71.27150919],\n",
       "       [ 45.46509824],\n",
       "       [ 44.15399949],\n",
       "       [ 47.75027165],\n",
       "       [ 64.80210579],\n",
       "       [ 78.94014541],\n",
       "       [ 45.23060721],\n",
       "       [ 50.75113531],\n",
       "       [ 55.66052878],\n",
       "       [ 28.4349954 ],\n",
       "       [ 36.14135804],\n",
       "       [ 44.04187001],\n",
       "       [ 50.58813968],\n",
       "       [ 62.85222476],\n",
       "       [ 27.46532911],\n",
       "       [ 49.45772726],\n",
       "       [ 69.824504  ],\n",
       "       [ 30.99290773],\n",
       "       [ 49.89376765],\n",
       "       [ 62.76156425],\n",
       "       [ 43.96044705],\n",
       "       [103.2017481 ],\n",
       "       [ 53.06507193],\n",
       "       [ 36.10996978],\n",
       "       [ 39.59145347],\n",
       "       [ 36.54119261],\n",
       "       [ 54.32432768],\n",
       "       [ 67.58960503],\n",
       "       [ 13.7988652 ],\n",
       "       [ 87.28484135],\n",
       "       [ 30.17253428],\n",
       "       [ 68.69237662],\n",
       "       [ 58.65428245],\n",
       "       [ 11.1831217 ],\n",
       "       [ 34.37826244],\n",
       "       [ 76.62931083],\n",
       "       [ 69.12949022],\n",
       "       [ 46.41945964],\n",
       "       [ 41.98024023],\n",
       "       [ 57.92424298],\n",
       "       [ 46.75823882],\n",
       "       [ 25.57957132],\n",
       "       [ 31.75570505],\n",
       "       [ 61.29158114],\n",
       "       [ 40.84912624],\n",
       "       [ 50.31721781],\n",
       "       [ 36.11881537],\n",
       "       [ 82.35359507],\n",
       "       [ 55.94244652],\n",
       "       [ 52.95045257],\n",
       "       [ 13.23990233],\n",
       "       [ 34.65390164],\n",
       "       [ 93.09962036],\n",
       "       [ 47.05422749],\n",
       "       [ 76.34462752],\n",
       "       [ 47.98639396],\n",
       "       [ 66.91241674],\n",
       "       [ 16.66541806],\n",
       "       [ 58.64499878],\n",
       "       [ 53.53422088],\n",
       "       [ 44.98733202],\n",
       "       [ 47.26611747],\n",
       "       [ 46.48025606],\n",
       "       [ 61.36835789],\n",
       "       [ 62.82044256],\n",
       "       [ 80.32436777],\n",
       "       [ 50.01170096],\n",
       "       [ 57.79105292],\n",
       "       [ 37.72138138],\n",
       "       [ 40.11933454],\n",
       "       [ 58.86579063],\n",
       "       [ 12.0503087 ],\n",
       "       [ 67.37023179],\n",
       "       [ 58.4624376 ],\n",
       "       [ 13.68928213],\n",
       "       [ 62.62402888],\n",
       "       [ 51.01172996],\n",
       "       [ 52.07148735],\n",
       "       [ 65.53806468],\n",
       "       [ 19.71447609],\n",
       "       [ 48.10540766],\n",
       "       [ 31.28198498],\n",
       "       [ 70.20728844],\n",
       "       [ 79.66529366],\n",
       "       [ 72.05330616],\n",
       "       [ 55.4575744 ],\n",
       "       [ 60.58435972],\n",
       "       [ 59.68118584]])"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict on the test data: y_pred\n",
    "y_pred = reg_all.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R^2: -0.49878558133024775\n",
      "Root Mean Squared Error: 35.88242630875365\n"
     ]
    }
   ],
   "source": [
    "# Compute and print R^2 and RMSE\n",
    "print(\"R^2: {}\".format(reg_all.score(X_test, y_test)))\n",
    "rmse = np.sqrt(mean_squared_error(y_test,y_pred))\n",
    "print(\"Root Mean Squared Error: {}\".format(rmse))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! You have built a OLS (Ordinary Least Squared) model to predict survival of patients from microarray data (gene expression dataset). Given a new chip, are you confident to predict if the patients will have a good prognostic by your model? :)\n",
    "\n",
    "- What does it mean a negative R-squared? How do you interpret the results?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cross validation\n",
    "\n",
    "Model performance is dependent on the way the data is split. Remember we put `test_size=0.3` arbitrarily before, which mean 30% of our dataset will be test and the rest for training. It can be detrimental for predicting unseen data if the train is not representative of the model's ability to generalize!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the necessary modules\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a linear regression object: reg\n",
    "reg = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute 5-fold cross-validation scores: cv_scores\n",
    "cv_scores = cross_val_score(reg,X,y,cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.58214328 -0.51468725 -1.20591698 -1.15897087 -0.55131609]\n",
      "Average 5-Fold CV Score: -0.8026068942574097\n"
     ]
    }
   ],
   "source": [
    "# Print the 5-fold cross-validation scores\n",
    "print(cv_scores)\n",
    "\n",
    "print(\"Average 5-Fold CV Score: {}\".format(np.mean(cv_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regularization: an example with LASSO\n",
    "\n",
    "Linear Regression minimize the loss function, thus it chooses a coefcient for each feature variable. Large coefcients can lead to overtting, which you have seen from the above excercise with negative R2! \n",
    "\n",
    "-> Penalizing large coefcients: Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/ridge.png\" width=200>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"fig/lasso.png\" width=200>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alpha is called a hyperparameter, it controls model complexity!\n",
    "\n",
    "- High alpha: large coefficients either negative or positive (absolute) are penalized\n",
    "\n",
    "- Alpha = 0 we come back to OLS!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = Lasso(alpha=0.1, normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.1, normalize=True)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso_pred = lasso.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.09239636227383086"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['A1BG', 'A2M', 'A2M-AS1', 'AACS', 'AADAC', 'AADACP1', 'AADAT', 'AAED1',\n",
       "       'AAGAB', 'AAK1',\n",
       "       ...\n",
       "       'ZW10', 'ZWILCH', 'ZWINT', 'ZXDA', 'ZXDB', 'ZYG11A', 'ZYG11B', 'ZYX',\n",
       "       'ZZEF1', 'ZZZ3'],\n",
       "      dtype='object', length=10077)"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names = X.columns\n",
    "names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = Lasso(alpha=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/caotranbichngoc/miniconda3/lib/python3.6/site-packages/sklearn/linear_model/_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1175.0609819564834, tolerance: 39.499362357236116\n",
      "  positive)\n"
     ]
    }
   ],
   "source": [
    "lasso_coef = lasso.fit(X, y).coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = plt.plot(range(len(names)), lasso_coef)\n",
    "#_ = plt.xticks(range(len(names)), names, rotation=60)\n",
    "_ = plt.ylabel('Coefficients')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Additional Reading:\n",
    "\n",
    "\n",
    "- https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html \n",
    "- https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
